
nunchuckReceiveC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004d6  0000056a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800104  00800104  0000056e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b22  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f9  00000000  00000000  00001172  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ad  00000000  00000000  0000196b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00001f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b1  00000000  00000000  000025d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002b87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 65 00 	call	0xca	; 0xca <main>
  9e:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  b2:	e1 ec       	ldi	r30, 0xC1	; 193
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 61       	ori	r24, 0x18	; 24
  ba:	80 83       	st	Z, r24
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <main>:
  ca:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	84 b9       	out	0x04, r24	; 4
  d4:	e0 e8       	ldi	r30, 0x80	; 128
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	82 6f       	ori	r24, 0xF2	; 242
  dc:	80 83       	st	Z, r24
  de:	e1 e8       	ldi	r30, 0x81	; 129
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8a 61       	ori	r24, 0x1A	; 26
  e6:	80 83       	st	Z, r24
  e8:	e6 e8       	ldi	r30, 0x86	; 134
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9c e9       	ldi	r25, 0x9C	; 156
  f0:	91 83       	std	Z+1, r25	; 0x01
  f2:	80 83       	st	Z, r24
  f4:	84 b5       	in	r24, 0x24	; 36
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	84 bd       	out	0x24, r24	; 36
  fa:	85 b5       	in	r24, 0x25	; 37
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	85 bd       	out	0x25, r24	; 37
 100:	ae e6       	ldi	r26, 0x6E	; 110
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	8c 91       	ld	r24, X
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8c 93       	st	X, r24
 10a:	89 ef       	ldi	r24, 0xF9	; 249
 10c:	87 bd       	out	0x27, r24	; 39
 10e:	80 81       	ld	r24, Z
 110:	91 81       	ldd	r25, Z+1	; 0x01
 112:	80 5d       	subi	r24, 0xD0	; 208
 114:	97 40       	sbci	r25, 0x07	; 7
 116:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 11a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 11e:	80 81       	ld	r24, Z
 120:	91 81       	ldd	r25, Z+1	; 0x01
 122:	80 5d       	subi	r24, 0xD0	; 208
 124:	97 40       	sbci	r25, 0x07	; 7
 126:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 12a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 12e:	78 94       	sei
 130:	28 e8       	ldi	r18, 0x88	; 136
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	ca e8       	ldi	r28, 0x8A	; 138
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	f8 94       	cli
 13a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <milliseconds>
 13e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <milliseconds+0x1>
 142:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <milliseconds+0x2>
 146:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <milliseconds+0x3>
 14a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <currentMillis>
 14e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <currentMillis+0x1>
 152:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <currentMillis+0x2>
 156:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <currentMillis+0x3>
 15a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <currentMillis>
 15e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <currentMillis+0x1>
 162:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <currentMillis+0x2>
 166:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <currentMillis+0x3>
 16a:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <previousMillis>
 16e:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <previousMillis+0x1>
 172:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <previousMillis+0x2>
 176:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <previousMillis+0x3>
 17a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 17e:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 182:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_start+0x2>
 186:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_start+0x3>
 18a:	8c 19       	sub	r24, r12
 18c:	9d 09       	sbc	r25, r13
 18e:	ae 09       	sbc	r26, r14
 190:	bf 09       	sbc	r27, r15
 192:	48 17       	cp	r20, r24
 194:	59 07       	cpc	r21, r25
 196:	6a 07       	cpc	r22, r26
 198:	7b 07       	cpc	r23, r27
 19a:	80 f4       	brcc	.+32     	; 0x1bc <main+0xf2>
 19c:	80 81       	ld	r24, Z
 19e:	91 81       	ldd	r25, Z+1	; 0x01
 1a0:	80 5d       	subi	r24, 0xD0	; 208
 1a2:	97 40       	sbci	r25, 0x07	; 7
 1a4:	d9 01       	movw	r26, r18
 1a6:	11 96       	adiw	r26, 0x01	; 1
 1a8:	9c 93       	st	X, r25
 1aa:	8e 93       	st	-X, r24
 1ac:	80 81       	ld	r24, Z
 1ae:	91 81       	ldd	r25, Z+1	; 0x01
 1b0:	80 5d       	subi	r24, 0xD0	; 208
 1b2:	97 40       	sbci	r25, 0x07	; 7
 1b4:	99 83       	std	Y+1, r25	; 0x01
 1b6:	88 83       	st	Y, r24
 1b8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 1bc:	78 94       	sei
 1be:	bc cf       	rjmp	.-136    	; 0x138 <main+0x6e>

000001c0 <__vector_14>:
ISR(TIMER0_COMPA_vect){
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
	++milliseconds;
 1d2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <milliseconds>
 1d6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <milliseconds+0x1>
 1da:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <milliseconds+0x2>
 1de:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <milliseconds+0x3>
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	a1 1d       	adc	r26, r1
 1e6:	b1 1d       	adc	r27, r1
 1e8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <milliseconds>
 1ec:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <milliseconds+0x1>
 1f0:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <milliseconds+0x2>
 1f4:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <milliseconds+0x3>
}
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <__vector_18>:

ISR(USART_RX_vect){
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	cf 92       	push	r12
 216:	df 92       	push	r13
 218:	ef 92       	push	r14
 21a:	ff 92       	push	r15
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
		}
	}
}

unsigned long millis(){
	return milliseconds;
 23c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <milliseconds>
 240:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <milliseconds+0x1>
 244:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <milliseconds+0x2>
 248:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <milliseconds+0x3>
	++milliseconds;
}

ISR(USART_RX_vect){
	
	previousMillis = millis(); //Reset watchdog
 24c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <previousMillis>
 250:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <previousMillis+0x1>
 254:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <previousMillis+0x2>
 258:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <previousMillis+0x3>
	uint8_t rxByte = UDR0; //read incoming byte
 25c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if (rxByte == 0xFA)  //startbyte
 260:	8a 3f       	cpi	r24, 0xFA	; 250
 262:	21 f4       	brne	.+8      	; 0x26c <__vector_18+0x62>
	{
		startByteBool = true;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <startByteBool>
 26a:	ca c0       	rjmp	.+404    	; 0x400 <__LOCK_REGION_LENGTH__>
	}
	else if (startByteBool && !leftByteBool && !rightByteBool)
 26c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <startByteBool>
 270:	99 23       	and	r25, r25
 272:	71 f0       	breq	.+28     	; 0x290 <__vector_18+0x86>
 274:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <leftByteBool>
 278:	91 11       	cpse	r25, r1
 27a:	0a c0       	rjmp	.+20     	; 0x290 <__vector_18+0x86>
 27c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <rightByteBool>
 280:	91 11       	cpse	r25, r1
 282:	06 c0       	rjmp	.+12     	; 0x290 <__vector_18+0x86>
	{
		leftByteBool = true;
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <leftByteBool>
		leftByte = rxByte;  //read in leftbyte
 28a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <leftByte>
 28e:	b8 c0       	rjmp	.+368    	; 0x400 <__LOCK_REGION_LENGTH__>
	}
	else if (startByteBool && leftByteBool && !rightByteBool)
 290:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <startByteBool>
 294:	99 23       	and	r25, r25
 296:	71 f0       	breq	.+28     	; 0x2b4 <__vector_18+0xaa>
 298:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <leftByteBool>
 29c:	99 23       	and	r25, r25
 29e:	51 f0       	breq	.+20     	; 0x2b4 <__vector_18+0xaa>
 2a0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <rightByteBool>
 2a4:	91 11       	cpse	r25, r1
 2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <__vector_18+0xaa>
	{
		rightByteBool = true;
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <rightByteBool>
		rightByte = rxByte; //read in rightbyte
 2ae:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <rightByte>
 2b2:	a6 c0       	rjmp	.+332    	; 0x400 <__LOCK_REGION_LENGTH__>
	}
	else if (startByteBool && leftByteBool && rightByteBool)
 2b4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <startByteBool>
 2b8:	99 23       	and	r25, r25
 2ba:	09 f4       	brne	.+2      	; 0x2be <__vector_18+0xb4>
 2bc:	a1 c0       	rjmp	.+322    	; 0x400 <__LOCK_REGION_LENGTH__>
 2be:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <leftByteBool>
 2c2:	99 23       	and	r25, r25
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <__vector_18+0xbe>
 2c6:	9c c0       	rjmp	.+312    	; 0x400 <__LOCK_REGION_LENGTH__>
 2c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <rightByteBool>
 2cc:	99 23       	and	r25, r25
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <__vector_18+0xc8>
 2d0:	97 c0       	rjmp	.+302    	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		if ((leftByte == 0xFB) && (rightByte == 0xFB)) //arm condition
 2d2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <leftByte>
 2d6:	9b 3f       	cpi	r25, 0xFB	; 251
 2d8:	71 f4       	brne	.+28     	; 0x2f6 <__vector_18+0xec>
 2da:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <rightByte>
 2de:	9b 3f       	cpi	r25, 0xFB	; 251
 2e0:	51 f4       	brne	.+20     	; 0x2f6 <__vector_18+0xec>
		{
			armState = true;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			
			startByteBool = false;
 2e8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <startByteBool>
			leftByteBool = false;  //setup for new packet
 2ec:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <leftByteBool>
			rightByteBool = false;
 2f0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rightByteBool>
 2f4:	85 c0       	rjmp	.+266    	; 0x400 <__LOCK_REGION_LENGTH__>
		}
		else if ((leftByte == 0xFC) && (rightByte == 0xFC)) //disarm condition
 2f6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <leftByte>
 2fa:	9c 3f       	cpi	r25, 0xFC	; 252
 2fc:	69 f4       	brne	.+26     	; 0x318 <__vector_18+0x10e>
 2fe:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <rightByte>
 302:	9c 3f       	cpi	r25, 0xFC	; 252
 304:	49 f4       	brne	.+18     	; 0x318 <__vector_18+0x10e>
		{
			armState = false;
 306:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			
			startByteBool = false;
 30a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <startByteBool>
			leftByteBool = false;  //setup for new packet
 30e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <leftByteBool>
			rightByteBool = false;
 312:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rightByteBool>
 316:	74 c0       	rjmp	.+232    	; 0x400 <__LOCK_REGION_LENGTH__>
		}
		else if (((leftByte ^ rightByte) == rxByte) && armState) //checksum and arm condition
 318:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <leftByte>
 31c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <rightByte>
 320:	92 27       	eor	r25, r18
 322:	98 13       	cpse	r25, r24
 324:	4a c0       	rjmp	.+148    	; 0x3ba <__vector_18+0x1b0>
 326:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 32a:	88 23       	and	r24, r24
 32c:	09 f4       	brne	.+2      	; 0x330 <__vector_18+0x126>
 32e:	45 c0       	rjmp	.+138    	; 0x3ba <__vector_18+0x1b0>
		{
			OCR1A = ICR1 - map(leftByte,0,100,2000,4000);
 330:	06 e8       	ldi	r16, 0x86	; 134
 332:	10 e0       	ldi	r17, 0x00	; 0
 334:	f8 01       	movw	r30, r16
 336:	c0 81       	ld	r28, Z
 338:	d1 81       	ldd	r29, Z+1	; 0x01
 33a:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <leftByte>
	USART_Transmit(0x0A);
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	a0 ed       	ldi	r26, 0xD0	; 208
 342:	b7 e0       	ldi	r27, 0x07	; 7
 344:	0e 94 38 02 	call	0x470	; 0x470 <__umulhisi3>
 348:	0f 2e       	mov	r0, r31
 34a:	f4 e6       	ldi	r31, 0x64	; 100
 34c:	cf 2e       	mov	r12, r31
 34e:	d1 2c       	mov	r13, r1
 350:	e1 2c       	mov	r14, r1
 352:	f1 2c       	mov	r15, r1
 354:	f0 2d       	mov	r31, r0
 356:	a7 01       	movw	r20, r14
 358:	96 01       	movw	r18, r12
 35a:	0e 94 19 02 	call	0x432	; 0x432 <__divmodsi4>
 35e:	da 01       	movw	r26, r20
 360:	c9 01       	movw	r24, r18
 362:	80 53       	subi	r24, 0x30	; 48
 364:	98 4f       	sbci	r25, 0xF8	; 248
 366:	af 4f       	sbci	r26, 0xFF	; 255
 368:	bf 4f       	sbci	r27, 0xFF	; 255
			leftByteBool = false;  //setup for new packet
			rightByteBool = false;
		}
		else if (((leftByte ^ rightByte) == rxByte) && armState) //checksum and arm condition
		{
			OCR1A = ICR1 - map(leftByte,0,100,2000,4000);
 36a:	c8 1b       	sub	r28, r24
 36c:	d9 0b       	sbc	r29, r25
 36e:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 372:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			OCR1B = ICR1 - map(rightByte,0,100,2000,4000);
 376:	f8 01       	movw	r30, r16
 378:	c0 81       	ld	r28, Z
 37a:	d1 81       	ldd	r29, Z+1	; 0x01
 37c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <rightByte>
	USART_Transmit(0x0A);
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	a0 ed       	ldi	r26, 0xD0	; 208
 386:	b7 e0       	ldi	r27, 0x07	; 7
 388:	0e 94 38 02 	call	0x470	; 0x470 <__umulhisi3>
 38c:	a7 01       	movw	r20, r14
 38e:	96 01       	movw	r18, r12
 390:	0e 94 19 02 	call	0x432	; 0x432 <__divmodsi4>
 394:	da 01       	movw	r26, r20
 396:	c9 01       	movw	r24, r18
 398:	80 53       	subi	r24, 0x30	; 48
 39a:	98 4f       	sbci	r25, 0xF8	; 248
 39c:	af 4f       	sbci	r26, 0xFF	; 255
 39e:	bf 4f       	sbci	r27, 0xFF	; 255
			rightByteBool = false;
		}
		else if (((leftByte ^ rightByte) == rxByte) && armState) //checksum and arm condition
		{
			OCR1A = ICR1 - map(leftByte,0,100,2000,4000);
			OCR1B = ICR1 - map(rightByte,0,100,2000,4000);
 3a0:	c8 1b       	sub	r28, r24
 3a2:	d9 0b       	sbc	r29, r25
 3a4:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 3a8:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
			
			startByteBool = false;
 3ac:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <startByteBool>
			leftByteBool = false;  //setup for new packet
 3b0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <leftByteBool>
			rightByteBool = false;			
 3b4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rightByteBool>
 3b8:	23 c0       	rjmp	.+70     	; 0x400 <__LOCK_REGION_LENGTH__>
		}
		else if (!armState) //not armed = low throttle
 3ba:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3be:	81 11       	cpse	r24, r1
 3c0:	19 c0       	rjmp	.+50     	; 0x3f4 <__vector_18+0x1ea>
		{
			OCR1A = ICR1 - 2000;
 3c2:	e6 e8       	ldi	r30, 0x86	; 134
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	91 81       	ldd	r25, Z+1	; 0x01
 3ca:	80 5d       	subi	r24, 0xD0	; 208
 3cc:	97 40       	sbci	r25, 0x07	; 7
 3ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			OCR1B = ICR1 - 2000;
 3d6:	80 81       	ld	r24, Z
 3d8:	91 81       	ldd	r25, Z+1	; 0x01
 3da:	80 5d       	subi	r24, 0xD0	; 208
 3dc:	97 40       	sbci	r25, 0x07	; 7
 3de:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 3e2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
			
			startByteBool = false;			
 3e6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <startByteBool>
			leftByteBool = false;  //setup for new packet
 3ea:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <leftByteBool>
			rightByteBool = false;	
 3ee:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rightByteBool>
 3f2:	06 c0       	rjmp	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
		}
		else{
			startByteBool = false; //reset if garbage received
 3f4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <startByteBool>
			leftByteBool = false;
 3f8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <leftByteBool>
			rightByteBool = false;
 3fc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rightByteBool>
		}
	}
}
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <__divmodsi4>:
 432:	05 2e       	mov	r0, r21
 434:	97 fb       	bst	r25, 7
 436:	1e f4       	brtc	.+6      	; 0x43e <__divmodsi4+0xc>
 438:	00 94       	com	r0
 43a:	0e 94 30 02 	call	0x460	; 0x460 <__negsi2>
 43e:	57 fd       	sbrc	r21, 7
 440:	07 d0       	rcall	.+14     	; 0x450 <__divmodsi4_neg2>
 442:	0e 94 47 02 	call	0x48e	; 0x48e <__udivmodsi4>
 446:	07 fc       	sbrc	r0, 7
 448:	03 d0       	rcall	.+6      	; 0x450 <__divmodsi4_neg2>
 44a:	4e f4       	brtc	.+18     	; 0x45e <__divmodsi4_exit>
 44c:	0c 94 30 02 	jmp	0x460	; 0x460 <__negsi2>

00000450 <__divmodsi4_neg2>:
 450:	50 95       	com	r21
 452:	40 95       	com	r20
 454:	30 95       	com	r19
 456:	21 95       	neg	r18
 458:	3f 4f       	sbci	r19, 0xFF	; 255
 45a:	4f 4f       	sbci	r20, 0xFF	; 255
 45c:	5f 4f       	sbci	r21, 0xFF	; 255

0000045e <__divmodsi4_exit>:
 45e:	08 95       	ret

00000460 <__negsi2>:
 460:	90 95       	com	r25
 462:	80 95       	com	r24
 464:	70 95       	com	r23
 466:	61 95       	neg	r22
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	8f 4f       	sbci	r24, 0xFF	; 255
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	08 95       	ret

00000470 <__umulhisi3>:
 470:	a2 9f       	mul	r26, r18
 472:	b0 01       	movw	r22, r0
 474:	b3 9f       	mul	r27, r19
 476:	c0 01       	movw	r24, r0
 478:	a3 9f       	mul	r26, r19
 47a:	70 0d       	add	r23, r0
 47c:	81 1d       	adc	r24, r1
 47e:	11 24       	eor	r1, r1
 480:	91 1d       	adc	r25, r1
 482:	b2 9f       	mul	r27, r18
 484:	70 0d       	add	r23, r0
 486:	81 1d       	adc	r24, r1
 488:	11 24       	eor	r1, r1
 48a:	91 1d       	adc	r25, r1
 48c:	08 95       	ret

0000048e <__udivmodsi4>:
 48e:	a1 e2       	ldi	r26, 0x21	; 33
 490:	1a 2e       	mov	r1, r26
 492:	aa 1b       	sub	r26, r26
 494:	bb 1b       	sub	r27, r27
 496:	fd 01       	movw	r30, r26
 498:	0d c0       	rjmp	.+26     	; 0x4b4 <__udivmodsi4_ep>

0000049a <__udivmodsi4_loop>:
 49a:	aa 1f       	adc	r26, r26
 49c:	bb 1f       	adc	r27, r27
 49e:	ee 1f       	adc	r30, r30
 4a0:	ff 1f       	adc	r31, r31
 4a2:	a2 17       	cp	r26, r18
 4a4:	b3 07       	cpc	r27, r19
 4a6:	e4 07       	cpc	r30, r20
 4a8:	f5 07       	cpc	r31, r21
 4aa:	20 f0       	brcs	.+8      	; 0x4b4 <__udivmodsi4_ep>
 4ac:	a2 1b       	sub	r26, r18
 4ae:	b3 0b       	sbc	r27, r19
 4b0:	e4 0b       	sbc	r30, r20
 4b2:	f5 0b       	sbc	r31, r21

000004b4 <__udivmodsi4_ep>:
 4b4:	66 1f       	adc	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	88 1f       	adc	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	1a 94       	dec	r1
 4be:	69 f7       	brne	.-38     	; 0x49a <__udivmodsi4_loop>
 4c0:	60 95       	com	r22
 4c2:	70 95       	com	r23
 4c4:	80 95       	com	r24
 4c6:	90 95       	com	r25
 4c8:	9b 01       	movw	r18, r22
 4ca:	ac 01       	movw	r20, r24
 4cc:	bd 01       	movw	r22, r26
 4ce:	cf 01       	movw	r24, r30
 4d0:	08 95       	ret

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
